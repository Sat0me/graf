using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
void interface_()
{
    Console.Clear();
    Console.WriteLine("1. Вывод графа");
    Console.WriteLine("2. Добавить вершину");
    Console.WriteLine("3. Удалить вершину");
    Console.WriteLine("4. Добавить ребро");
    Console.WriteLine("5. Удалить ребро");
    Console.WriteLine("6. Запись в файл");
    Console.WriteLine("7. Построить граф");
    Console.WriteLine("9. Выход из программы");
}
void interface_graf()
{
    Console.Clear();
    Console.WriteLine("1. Полный граф");
    Console.WriteLine("2. Дополнение графа");
    Console.WriteLine("3. Объединение графов");
    Console.WriteLine("4. Соединение графов");
    Console.WriteLine("9. Назад");
}





var path1 = @"D:\graf.csv";
var path2 = @"D:\graf3.csv";
var path3 = @"D:\graf4.csv";

Graf graf1 = new Graf(path1);
Graf graf2 = new Graf(path3);
graf1.checknull();
graf2.checknull();


bool flag_interface = true;
do
{
    interface_();
    int koef;
    int.TryParse(Console.ReadLine(), out koef);
    switch (koef)
    {
        case 1:
            Console.Clear();
            graf1.Print();
            Console.WriteLine("\nНажмите любую кнопку, чтобы продолжить!");
            break;
        case 2:
            Console.Clear();
            Console.Write("Введите вершину: ");
            graf1.add_node(Convert.ToInt32(Console.ReadLine()));
            Console.WriteLine("\nНажмите любую кнопку, чтобы продолжить!");
            break;
        case 3:
            Console.Clear();
            Console.Write("Введите вершину: ");
            graf1.delete_node(Convert.ToInt32(Console.ReadLine()));
            Console.WriteLine("\nНажмите любую кнопку, чтобы продолжить!");
            break;
        case 4:
            Console.Clear();
            Console.Write("Введите вершину: ");
            int key = Convert.ToInt32(Console.ReadLine());
            Console.Write("Введите ребро: ");
            int i;
            string? num;
            num = Console.ReadLine();
            if (int.TryParse(num, out i)) { graf1.add_edge(key, i); }
            else if (num != "") Console.WriteLine("Ошибка 1");
            
            Console.WriteLine("\nНажмите любую кнопку, чтобы продолжить!");
            break;
        case 5:
            Console.Clear();
            Console.Write("Введите вершину: ");
            int left = Convert.ToInt32(Console.ReadLine());
            Console.Write("Введите ребро: ");
            int right = Convert.ToInt32(Console.ReadLine());
            graf1.delete_edge(left, right);
            Console.WriteLine("\nНажмите любую кнопку, чтобы продолжить!");
            break;
        case 6:
            Console.Clear();
            graf1.writefile();
            Console.WriteLine("\nНажмите любую кнопку, чтобы продолжить!");
            break;
        case 7:
            interface_graf();
            int koef2;
            int.TryParse(Console.ReadLine(), out koef2);
            switch(koef2)
            {
                case 1:
                    Console.Clear();
                    Graf.fullgraf(graf1).Print();
                    Console.WriteLine("\nНажмите любую кнопку, чтобы продолжить!");
                    break;
                case 2:
                    Console.Clear();
                    Graf.additiongraf(graf1).Print();
                    Console.WriteLine("\nНажмите любую кнопку, чтобы продолжить!");
                    break;
                case 3:
                    Console.Clear();
                    Graf.mergegraf(graf1, graf2).Print();
                    break;
                case 4:
                    Console.Clear();
                    Graf.uniongraf(graf1, graf2).Print();
                    break;
                default: 
                    break;
            }
            break;
        case 8:
            Console.Clear();
            graf1.Print();
            graf1.SCC();
            break;
        case 9:
            flag_interface = false;
            break;
        default:
            Console.WriteLine("Ошибка");
            break;
    }
    if (flag_interface == true) Console.ReadLine();
    else break;
} while (flag_interface == true);



class Graf
{
    Dictionary<int, Dictionary<int, int?>> adj;
    bool Orientation;
    bool Weight;
    string path;
    public Graf() // конструктор по умолчанию
    {
        adj = new Dictionary<int, Dictionary<int, int?>>();
        Orientation = true;
        Weight = false;
        path = @"D:\newgraf";
    }
    public Graf(string path) // конструктор
    {
        adj = new Dictionary<int, Dictionary<int, int?>>();
        this.path = path;
        StreamReader sr = new StreamReader(path);
        string line = sr.ReadLine();
        string[] spl = line.Split(';');
        Orientation = Convert.ToBoolean(spl[0]);
        Weight = Convert.ToBoolean(spl[1]);
        line = sr.ReadLine();
        while (line != "")
        {
            if (line == null) break;
            int k;
            var dict = new Dictionary<int, int?>();
            spl = line.Split(';');
            k = Convert.ToInt32(spl[0]);
            while (Convert.ToInt32(spl[0]) == k && line != null)
            {
                if (spl[1] == "")
                {
                    spl[1] = "0";
                }
                dict.Add(Convert.ToInt32(spl[1]), Convert.ToInt32(Convert.IsDBNull(spl[2])));
                line = sr.ReadLine();
                if (line != null) spl = line.Split(';');
            }
            adj.Add(k, dict);
        }
        sr.Close();
    }
    public Graf(Graf graf) // копирующий конструктор
    {
        Orientation = graf.Orientation;
        Weight = graf.Weight;
        path = graf.path;
        adj = new Dictionary<int, Dictionary<int, int?>>(graf.adj);
        foreach (var i in adj.Keys)
        {
            adj[i] = new Dictionary<int, int?>(graf.adj[i]);
        }
    }


    public void Print() // вывод смежности графов
    {
        foreach (int i in adj.Keys)
        {
            Console.Write("[" + i + "] ");
            if (adj[i] != null)
            {
                foreach (int j in adj[i].Keys)
                {
                    Console.Write(j + " " + adj[i][j].Value + "; ");
                }
            }
            Console.WriteLine();
        }
    }

    public void writefile()
    {
        using (StreamWriter stW = new StreamWriter(path))
        {
            stW.WriteLine($"{Orientation};{Weight}");
            if (Weight)
            {
                foreach (var nodewf in adj.Keys)
                {
                    if (adj[nodewf].Keys.Count != 0)
                    {
                        foreach (var edgewf in adj[nodewf].Keys)
                        {
                            stW.WriteLine($"{nodewf};{edgewf};{adj[nodewf][edgewf].Value}");
                        }
                    }
                    else stW.WriteLine($"{nodewf}");
                }
            }
            else
            {
                foreach (var nodewf in adj.Keys)
                {
                    if (adj[nodewf].Keys.Count != 0)
                    {
                        foreach (var edgewf in adj[nodewf].Keys)
                        {
                            stW.WriteLine($"{nodewf};{edgewf};null");
                        }
                    }
                    else stW.WriteLine($"{nodewf}");
                }
            }
        }
    }

    public void add_node(int i) //добавление вершины
    {
        bool flag = true;
        foreach (var j in adj.Keys)
        {
            if (j == i)
            {
                flag = false;
                Console.WriteLine("Такая вершина уже существует");
                break;
            }
            else if (i <= 0)
            {
                flag = false;
                Console.WriteLine("Вершина не может быть нулем или отрицательным числом");
                break;
            }
        }
        if (flag == true) adj.Add(i, null);
    }

    public void delete_node(int i) //удаление вершины
    {
        foreach (var val in adj.Values)
        {
            val.Remove(i);
        }
        adj.Remove(i);
        //if (Orientation)
        //{
        //    if (adj.Remove(i) == true)
        //    {
        //        adj.Remove(i);
        //    }
        //    else Console.WriteLine("Ошибка");
        //}
        //else
        //{
        //    if (adj.Remove(i) == true)
        //    {
        //        adj.Remove(i);
        //        foreach (var j in adj.Values)
        //        {
        //            if (j.ContainsKey(i)) j.Remove(i);
        //        }
        //    }
        //    else Console.WriteLine("Ошибка");
        //}
    }

    public void add_edge(int i, int j) // добавления ребра(дуги)
    {
        if (Orientation)
        {
            if (Weight)
            {
                Console.Write("Введите вес ребра 1: ");
                int w = int.Parse(Console.ReadLine());
                if (check_node(j) == true && check_edge(j, i) == true && j != 0)
                {
                    adj[i].Add(j, w);
                }
                else
                {
                    Console.WriteLine("Ошибка");
                }
            }
            else
            {
                if (check_node(j) == true && check_edge(j, i) == true && j != 0)
                {
                    adj[i].Add(j, 0);
                }
                else
                {
                    Console.WriteLine("Ошибка");
                }
            }
        }
        else
        {
            if (Weight)
            {
                Console.Write("Введите вес ребра 1: ");
                int w = int.Parse(Console.ReadLine());
                if (check_node(j) == true && check_edge(j, i) == true && j != 0)
                {
                    adj[i].Add(j, w);
                    adj[j].Add(i, w);
                }
                else
                {
                    Console.WriteLine("Ошибка");
                }
            }
            else
            {
                if (check_node(j) == true && check_edge(j, i) == true && j != 0)
                {
                    adj[i].Add(j, 0);
                    adj[j].Add(i, 0);
                }
                else
                {
                    Console.WriteLine("Ошибка");
                }
            }
        }
    }

    public void delete_edge(int i, int j) // удаление ребра(дуги)
    {
        if (Orientation)
        {
            if (adj[i].Remove(j) == true) adj[i].Remove(j);
            else Console.WriteLine("Ошибка");
        }
        else
        {
            if (adj[i].Remove(j) == true)
            {
                adj[i].Remove(j);
                adj[j].Remove(i);
            }
            else Console.WriteLine("Ошибка");
        }
    }

    public bool check_node(int i) // проверка на существование вершины для создания ребра
    {
        foreach (var key in adj.Keys)
        {
            if (key == i) return true;
        }
        return false;
    }

    public bool check_edge(int j, int i) // проверка на существование ребра
    {
        foreach (var key in adj[i].Keys)
        {
            if (key == j) return false;
        }
        return true;
    }
    public void checknull()
    {
        foreach (var key in adj.Keys)
        {
            foreach (var valkey in adj[key].Keys)
            {
                if (valkey == 0) adj[key].Remove(valkey);
            }
        }
    }


    static public Graf fullgraf(Graf graf) // полный граф
    {
        Graf graf2 = new Graf(graf);
        if (graf.Weight)
        {
            foreach (var key in graf2.adj.Keys)
            {
                foreach (var val in graf2.adj.Values)
                {
                    if (!val.ContainsKey(key))
                    {
                        val.Add(key, int.Parse(Console.ReadLine()));
                    }
                }
            }
        }
        else
        {
            foreach (var key in graf2.adj.Keys)
            {
                foreach (var val in graf2.adj.Values)
                {
                    if (!val.ContainsKey(key))
                    {
                        val.Add(key, 0);
                    }
                }
            }
        }
        return graf2;
    }

    static public Graf additiongraf(Graf graf) // дополнение графа
    {
        Graf graf2 = new Graf(graf);
        if (graf.Weight)
        {
            foreach (var key in graf2.adj.Keys)
            {
                foreach (var val in graf2.adj.Values)
                {
                    if (!val.ContainsKey(key))
                    {
                        val.Add(key, int.Parse(Console.ReadLine()));
                    }
                    else val.Remove(key);
                }
            }
        }
        else
        {
            foreach (var key in graf2.adj.Keys)
            {
                foreach (var val in graf2.adj.Values)
                {
                    if (!val.ContainsKey(key))
                    {
                        val.Add(key, 0);
                    }
                    else val.Remove(key);
                }
            }
        }
        return graf2;
    }

    static public Graf mergegraf(Graf graf1, Graf graf2) //Объединение графов
    {
        if (graf1.Orientation != graf2.Orientation || graf1.Weight != graf2.Weight)
        {
            Console.WriteLine("Ошибка");
            return new Graf();
        }
        Graf graf3 = new Graf(graf1);
        foreach (var key in graf2.adj.Keys)
        {
            if (graf3.adj.ContainsKey(key))
            {
                Console.WriteLine("Ошибка. Есть одинаковые вершины.");
                return new Graf();
            }
            foreach (var valkey2 in graf2.adj[key].Keys)
            {
                graf3.adj[key].Add(valkey2, graf2.adj[key][valkey2]);
            }
        }
        return graf3;
    }
    static public Graf uniongraf(Graf graf1, Graf graf2) //Соединение графов
    {
        Graf graf3 = new Graf(graf1);
        if (graf1.Orientation != graf2.Orientation || graf1.Weight != graf2.Weight)
        {
            Console.WriteLine("Ошибка");
            return new Graf();
        }
        foreach (var key2 in graf2.adj.Keys)
        {
            graf3.adj.Add(key2, graf2.adj[key2]);
        }
        if (graf3.Orientation)
        {
            foreach (var key in graf1.adj.Keys)
            {
                foreach (var key2 in graf2.adj.Keys)
                {
                    graf3.add_edge(key, key2);
                }
            }
        }
        else
        {
            foreach (var key in graf1.adj.Keys)
            {
                foreach (var key2 in graf2.adj.Keys)
                {
                    graf3.add_edge(key, key2);
                    graf3.add_edge(key2, key);
                }
            }
        }
        return graf3;
    }

    private void SCCUtil(int u, int[] low, int[] disc,
                 bool[] stackMember, Stack<int> st, int Time)
    {

        disc[u] = Time;
        low[u] = Time;
        Time += 1;
        stackMember[u] = true;
        st.Push(u);

        int n;

        foreach (int i in adj[u].Keys)
        {
            n = i;

            if (disc[n] == -1)
            {
                SCCUtil(n, low, disc, stackMember, st, Time);

                // Check if the subtree rooted with v
                // has a connection to one of the
                // ancestors of u
                // Case 1 (per above discussion on
                // Disc and Low value)
                low[u] = Math.Min(low[u], low[n]);
            }
            else if (stackMember[n] == true)
            {
                // Update low value of 'u' only if 'v' is
                // still in stack (i.e. it's a back edge,
                // not cross edge).
                // Case 2 (per above discussion on Disc
                // and Low value)
                low[u] = Math.Min(low[u], disc[n]);
            }
        }

        // head node found, pop the stack and print an SCC
        // To store stack extracted vertices
        int w = -1;
        if (low[u] == disc[u])
        {
            while (w != u)
            {
                w = st.Pop();
                Console.Write(w + " ");
                stackMember[w] = false;
            }
            Console.WriteLine();
        }
    }

    // The function to do DFS traversal.
    // It uses SCCUtil()
    public void SCC()
    {
        int Time = 0;
        int V = adj.Keys.Count;
        // Mark all the vertices as not visited
        // and Initialize parent and visited,
        // and ap(articulation point) arrays
        int[] disc = new int[V];
        int[] low = new int[V];
        for (int i = 0; i < V; i++)
        {
            disc[i] = -1;
            low[i] = -1;
        }

        bool[] stackMember = new bool[V];
        Stack<int> st = new Stack<int>();
        // Call the recursive helper function
        // to find strongly connected components
        for (int i = 0; i < V; i++)
            if (disc[i] == -1)
                SCCUtil(i, low, disc, stackMember, st, Time);
    }
};